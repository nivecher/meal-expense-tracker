# API Design Standards and Best Practices

## RESTful API Design
- Use proper HTTP methods (GET, POST, PUT, DELETE, PATCH)
- Use resource-based URLs
- Use plural nouns for collections
- Use HTTP status codes correctly
- Implement proper error handling
- Use consistent response formats

## URL Structure
```
/api/v1/resource                    # Collection
/api/v1/resource/{id}              # Single resource
/api/v1/resource/{id}/subresource  # Nested resource
/api/v1/resource/search             # Search endpoint
```

## HTTP Methods
- `GET` - Retrieve data (safe, idempotent)
- `POST` - Create new resource
- `PUT` - Update entire resource
- `PATCH` - Partial update
- `DELETE` - Remove resource
- `HEAD` - Get headers only
- `OPTIONS` - Get allowed methods

## Response Format
```json
{
  "success": true,
  "data": {
    // Resource data
  },
  "message": "Success message",
  "errors": null,
  "meta": {
    "pagination": {
      "page": 1,
      "per_page": 20,
      "total": 100
    }
  }
}
```

## Error Handling
- Use appropriate HTTP status codes
- Provide meaningful error messages
- Include error codes for client handling
- Log errors with context
- Don't expose internal system details

## HTTP Status Codes
- `200` - OK
- `201` - Created
- `400` - Bad Request
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `422` - Unprocessable Entity
- `500` - Internal Server Error

## Authentication & Authorization
- Use JWT tokens for authentication
- Implement proper token expiration
- Use role-based access control
- Validate permissions on each endpoint
- Implement rate limiting

## Input Validation
- Validate all input parameters
- Use Pydantic for request validation
- Provide clear validation error messages
- Sanitize user inputs
- Use proper data types

## Pagination
- Implement pagination for large datasets
- Use cursor-based pagination when possible
- Include pagination metadata in responses
- Set reasonable page size limits

## Versioning
- Use URL versioning (/api/v1/)
- Maintain backward compatibility
- Document breaking changes
- Provide migration guides

## Documentation
- Use OpenAPI/Swagger specification
- Document all endpoints
- Include request/response examples
- Document error responses
- Keep documentation up to date

## Performance
- Implement caching where appropriate
- Use database query optimization
- Implement request/response compression
- Use async/await for I/O operations
- Monitor API performance metrics

## Security
- Use HTTPS for all endpoints
- Implement CORS properly
- Validate and sanitize inputs
- Use parameterized queries
- Implement proper logging
- Monitor for suspicious activity
description:
globs:
alwaysApply: false
---
