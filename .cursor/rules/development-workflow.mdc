# Development Workflow and Git Practices

## Git Workflow
- Use feature branches for development
- Follow semantic versioning
- Use meaningful branch names
- Keep branches up to date with main
- Use pull requests for code review
- Require code review before merging

## Branching Strategy
- `main` - production-ready code
- `develop` - integration branch
- `feature/*` - new features
- `bugfix/*` - bug fixes
- `hotfix/*` - urgent production fixes
- `release/*` - release preparation

## Commit Messages
- Use present tense
- Start with a capital letter
- Keep the first line under 50 characters
- Include a blank line between subject and body
- Reference issue numbers when applicable
- Use conventional commit format:
  - `feat:` for new features
  - `fix:` for bug fixes
  - `docs:` for documentation
  - `style:` for formatting changes
  - `refactor:` for code refactoring
  - `test:` for adding tests
  - `chore:` for maintenance tasks

## Code Review Process
- Review your own code first
- Be constructive in feedback
- Keep PRs small and focused
- Address all feedback before merging
- Use automated checks (linting, tests)
- Require approval from at least one reviewer

## Development Environment
- Use local development environment
- Keep environment variables in .env file
- Document setup process
- Use Docker for consistent environments
- Use virtual environments for Python
- Use Node.js version manager

## Pre-commit Hooks
- Run linting (Black, flake8, ESLint)
- Run type checking (mypy)
- Run security scanning (Bandit)
- Run tests
- Format code automatically
- Check for secrets in code

## Continuous Integration
- Run tests on every commit
- Run linting and type checking
- Generate coverage reports
- Run security scans
- Validate infrastructure code
- Deploy to staging on merge to develop

## Deployment Process
1. Code review and approval
2. Automated testing and validation
3. Staging deployment and testing
4. Production deployment
5. Post-deployment verification
6. Monitoring and rollback if needed

## Environment Management
- Use environment-specific configuration
- Use secrets management (AWS Secrets Manager)
- Implement proper access controls
- Use infrastructure as code
- Document environment setup

## Quality Gates
- All tests must pass
- Code coverage requirements met
- Security scans pass
- Linting and formatting pass
- Type checking passes
- Documentation updated
description:
globs:
alwaysApply: false
---
