# Data Models and Database Schema Specifications

## Core Data Models

### User Model
```python
class User:
    id: int (Primary Key)
    email: str (Unique, Required)
    password_hash: str (Required)
    first_name: str (Required)
    last_name: str (Required)
    role: str (Enum: 'user', 'admin', Default: 'user')
    is_active: bool (Default: True)
    created_at: datetime (Auto-generated)
    updated_at: datetime (Auto-updated)
    last_login: datetime
    preferences: JSON (Dietary restrictions, favorite cuisines)
```

### Restaurant Model
```python
class Restaurant:
    id: int (Primary Key)
    name: str (Required)
    address: str (Required)
    city: str (Required)
    state: str (Required)
    zip_code: str (Required)
    phone: str (Optional)
    website: str (Optional)
    cuisine_type: str (Required)
    google_place_id: str (Optional, for Google Maps integration)
    latitude: float (Optional)
    longitude: float (Optional)
    rating: float (Optional, 1-5 scale)
    is_verified: bool (Default: False)
    created_by: int (Foreign Key to User)
    created_at: datetime (Auto-generated)
    updated_at: datetime (Auto-updated)
```

### Expense Model
```python
class Expense:
    id: int (Primary Key)
    user_id: int (Foreign Key to User, Required)
    restaurant_id: int (Foreign Key to Restaurant, Required)
    amount: Decimal (Required, Precision: 10, Scale: 2)
    date: date (Required)
    meal_type: str (Enum: 'breakfast', 'lunch', 'dinner', 'snack', Required)
    category: str (Required)
    notes: str (Optional)
    receipt_image_url: str (Optional)
    is_void: bool (Default: False)
    created_at: datetime (Auto-generated)
    updated_at: datetime (Auto-updated)
```

### Category Model
```python
class Category:
    id: int (Primary Key)
    name: str (Required, Unique)
    description: str (Optional)
    color: str (Hex color code for UI)
    is_active: bool (Default: True)
    created_at: datetime (Auto-generated)
```

### UserPreference Model
```python
class UserPreference:
    id: int (Primary Key)
    user_id: int (Foreign Key to User, Required)
    favorite_restaurants: List[int] (Array of Restaurant IDs)
    dietary_restrictions: List[str] (Array of restrictions)
    budget_alerts: bool (Default: True)
    monthly_budget: Decimal (Optional)
    notification_preferences: JSON
    created_at: datetime (Auto-generated)
    updated_at: datetime (Auto-updated)
```

## Database Relationships

### One-to-Many Relationships
- User → Expenses (One user can have many expenses)
- User → UserPreferences (One user has one preference set)
- Restaurant → Expenses (One restaurant can have many expenses)
- Category → Expenses (One category can have many expenses)

### Many-to-Many Relationships
- Users ↔ Restaurants (Users can have favorite restaurants)
- Users ↔ Categories (Users can have preferred categories)

## Data Validation Rules

### User Data
- Email must be valid format and unique
- Password must be at least 8 characters with complexity
- First and last names must be 1-50 characters
- Role must be valid enum value

### Restaurant Data
- Name must be 1-100 characters
- Address fields cannot be empty
- Phone must be valid format if provided
- Coordinates must be valid latitude/longitude if provided
- Rating must be between 1.0 and 5.0

### Expense Data
- Amount must be positive and less than $10,000
- Date cannot be in the future
- Meal type must be valid enum value
- Category must exist and be active
- User must exist and be active

## Indexing Strategy

### Primary Indexes
- User: email (for login lookups)
- Restaurant: name, city (for search)
- Expense: user_id, date (for user expense queries)
- Category: name (for category lookups)

### Composite Indexes
- Expense: (user_id, date) for user expense history
- Expense: (restaurant_id, date) for restaurant expense history
- Restaurant: (city, cuisine_type) for location-based search

## Data Retention Policies

### Active Data
- User accounts: Indefinite (until deletion request)
- Expenses: 7 years (tax compliance)
- Restaurants: Indefinite (community resource)
- Categories: Indefinite (system configuration)

### Audit Trail
- User login attempts: 90 days
- System logs: 1 year
- API access logs: 30 days
- Error logs: 90 days

## Data Migration Strategy

### Schema Changes
- Use Alembic for database migrations
- Version all schema changes
- Provide rollback procedures
- Test migrations on staging data

### Data Backups
- Daily automated backups
- Point-in-time recovery capability
- Encrypted backup storage
- Test restore procedures monthly
description:
globs:
alwaysApply: false
---
