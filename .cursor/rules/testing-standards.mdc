# Testing Standards and Best Practices

## Test Coverage Requirements
- Aim for 80%+ test coverage
- Cover all business logic
- Test error conditions
- Test edge cases
- Test all public methods and functions

## Unit Testing
- Test one thing per test case
- Use descriptive test names
- Follow Arrange-Act-Assert pattern
- Use fixtures for test data
- Mock external dependencies
- Test edge cases and error conditions
- Keep business logic pure and side-effect free when possible
- Use dependency injection for external services

## Integration Testing
- Test API endpoints
- Test database interactions
- Test authentication and authorization
- Test error responses
- Test complete user workflows

## Test Organization
- Use descriptive test names that explain what is being tested
- Group related tests using test classes or modules
- Use fixtures for common test data setup
- Separate unit tests from integration tests
- Use test doubles (mocks, stubs, fakes) for external dependencies

## Python Testing (pytest)
- Use pytest fixtures for test data and setup
- Use parametrize for testing multiple scenarios
- Use factory_boy for generating test data
- Mock external services using unittest.mock or pytest-mock
- Use pytest-cov for coverage reporting
- Use pytest-xdist for parallel test execution

## JavaScript Testing
- Use Jest for unit testing
- Use React Testing Library for component testing
- Mock external API calls
- Test user interactions and behavior
- Use snapshot testing for UI components
- Test error handling and edge cases

## Test Data Management
- Use factories for generating test data
- Avoid hardcoded test data
- Use faker libraries for realistic test data
- Clean up test data after each test
- Use database transactions for test isolation

## Mocking and Stubbing
- Mock external API calls
- Mock database connections for unit tests
- Use dependency injection to make testing easier
- Mock time-dependent functions
- Mock file system operations

## Performance Testing
- Test database query performance
- Test API response times
- Use load testing for critical paths
- Monitor memory usage during tests
- Test with realistic data volumes

## Security Testing
- Test authentication and authorization
- Test input validation
- Test SQL injection prevention
- Test XSS prevention
- Test CSRF protection

## Continuous Integration
- Run tests on every commit
- Fail builds on test failures
- Generate coverage reports
- Use parallel test execution
- Cache test dependencies
description:
globs:
alwaysApply: false
---
