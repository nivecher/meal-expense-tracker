# TIGER Principles - Always Follow These Core Development Standards

## T - Testable
- Write code that is easy to test in isolation
- Follow the Arrange-Act-Assert pattern in tests
- Use dependency injection for external services
- Keep business logic pure and side-effect free when possible
- Write unit tests for all public methods and functions
- Use test doubles (mocks, stubs, fakes) for external dependencies
- Aim for high test coverage of business logic
- Test edge cases and error conditions

## I - Incremental
- Make small, focused changes
- Each commit should be a single logical change
- Use feature flags for large feature rollouts
- Break down large features into smaller, deliverable pieces
- Continuously integrate and deploy small changes
- Use iterative development with frequent feedback loops
- Refactor in small, safe steps

## G - Goal-oriented
- Each function/method should have a single responsibility
- Code should be written to solve specific business problems
- Avoid premature optimization
- Document the "why" behind important decisions
- Align code structure with business domains
- Regularly review and align code with business objectives
- Remove unused code and dead features

## E - Explicit
- Make dependencies explicit
- Use clear, descriptive names for variables, functions, and classes
- Avoid magic numbers and strings - use named constants
- Make type contracts explicit with type hints
- Document complex algorithms and business rules
- Make error conditions and edge cases explicit
- Prefer explicit over implicit behavior

## R - Responsibility-focused
- Follow the Single Responsibility Principle
- Group related functionality together
- Separate concerns between layers (presentation, business logic, data access)
- Use appropriate design patterns for clear responsibility separation
- Keep functions and classes focused on one thing
- Avoid god objects and utility classes
- Design for change by isolating volatile components
description:
globs:
alwaysApply: false
---
