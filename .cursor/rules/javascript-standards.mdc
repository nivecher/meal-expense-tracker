# JavaScript Development Standards

## Code Style
- Use ES6+ syntax
- Use `camelCase` for variables and functions
- Use `PascalCase` for React components
- Use `UPPER_CASE` for constants
- Use template literals for string interpolation
- Use destructuring for objects and arrays
- Use arrow functions for callbacks

## File Organization
- Place all JavaScript in dedicated .js files under `/app/static/js/`
- Organize by feature/component (e.g., `restaurant-form.js`, `user-preferences.js`)
- No inline JavaScript or HTML event handlers in HTML files
- Use modules for code organization

## Event Handling
- Use `addEventListener()` instead of HTML event attributes (`onclick`, `onsubmit`, etc.)
- Use event delegation for dynamic content
- Keep DOM manipulation separate from business logic

## Initialization
- Use a main initialization function in each JS file
- Call this function when the DOM is fully loaded
- Example:
```javascript
function initRestaurantForm() {
  // Initialize form handlers
  document.getElementById('restaurantForm').addEventListener('submit', handleFormSubmit);
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', initRestaurantForm);
```

## Data Attributes
- Use `data-*` attributes to pass data from HTML to JavaScript
- Example:
```html
<div data-restaurant-id="123" data-is-verified="true">...</div>
```
```javascript
const element = document.querySelector('[data-restaurant-id]');
const restaurantId = element.dataset.restaurantId;
const isVerified = element.dataset.isVerified === 'true';
```

## Best Practices
- No inline JavaScript in HTML files
- Use modules for code organization
- Keep DOM manipulation separate from business logic
- Use event delegation for dynamic content
- Implement proper error handling
- Use modern browser APIs and features
- Follow accessibility best practices
- Handle API errors gracefully
- Show user-friendly error messages
- Implement retry logic for failed requests
- Log errors for debugging

## HTML Template Example
```html
<!-- Good -->
<script src="{{ url_for('static', filename='js/pages/restaurant-form.js') }}"></script>

<!-- Bad -->
<script>
function handleClick() {
  // Inline JavaScript
}
</script>
<button onclick="handleClick()">Click me</button>
```

## Benefits
- Better separation of concerns
- Improved code maintainability
- Easier testing
- Better caching by browsers
- Cleaner HTML templates
description:
globs:
alwaysApply: false
---
