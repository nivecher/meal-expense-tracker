# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# Node.js dependencies
node_modules/

# Virtual Environment
venv/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# Environment variables
.env

# Database
*.db
*.sqlite3

# Logs
*.log

# mypy
.mypy_cache/

# OS
.DS_Store
Thumbs.db

# Coverage
.coverage*

# pytest
.pytest_cache/

# Terraform
.terraform/
.terraform.lock.hcl
*.tfstate
*.tfstate.*
terraform.tfvars
*.tfvars.json
*.tfvars
*.tfvars.backup
*.tfplan
*.tfplan.*
.terraformrc
terraform.rc

# Crash log files
crash.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
#
#*.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore Terraform plan files
tfplan

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore terraform locks
.terraform.lock.hcl

# Ignore terragrunt cache
.terragrunt-cache

testing/
cache/
.serverless/
.serverless*

package-lock.json
