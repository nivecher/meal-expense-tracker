[build-system]
requires = [ "setuptools>=45", "wheel", "setuptools-scm>=8.0.0",]
build-backend = "setuptools.build_meta"

[project]
name = "meal-expense-tracker"
dynamic = [ "version",]
description = "A Flask-based web application for tracking meal expenses"
requires-python = ">=3.13,<3.14"
[[project.authors]]
name = "nivecher"
email = "mtd37@hotmail.com"

[project.urls]
homepage = "https://github.com/nivecher/meal-expense-tracker"

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
write_to = "app/_version.py"
write_to_template = "__version__ = \"{version}\"\n"

[tool.setuptools]
packages = [ "app",]
include-package-data = true
zip-safe = false

[tool.black]
line-length = 120
target-version = [ "py312",]
include = "\\.pyi?$"

[tool.isort]
profile = "black"
multi_line_output = 3



[tool.djlint]
profile = "django"
indent = 4
max_line_length = 120
require_pragma = false
format_attribute_template_tags = true
format_css = true
format_js = true
use_gitignore = true
extend_include = [ "*.html", "*.jinja", "*.j2",]

[tool.djlint.ignore]
ignore = [ "venv/*", ".git/*", "node_modules/*", "*.min.*",]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "flask.*",
    "flask_*",
    "sqlalchemy.*",
    "pytest",
    "pytest_*",
    "awsgi.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*",
    "migrate_db.py",
    "wsgi.py"
]
ignore_errors = true

[bandit]
# Skip these tests
skips = [
    "B101",  # Assert statement
    "B311",  # Standard pseudo-random generators
    "B404",  # Subprocess without shell=True
]

# Only run these tests (empty = all)
tests = []

# Files/directories to exclude
exclude_dirs = [
    "tests/",
    "venv/",
    ".venv/",
    "migrations/",
    "node_modules/"
]

# Output format (default: "") - can be "csv", "custom", "html", "json", "txt", "xml", "yaml"
output_format = ""

# Output file (default: "")
output_file = ""

# Verbose output (default: False)
verbose = false

# Debug output (default: False)
debug = false

[tool.djlint.extend]
rules = [ "H025", "H006", "H007",]

[tool.pytest.ini_options]
testpaths = [ "tests",]
python_files = [ "test_*.py",]
python_classes = [ "Test",]
python_functions = [ "test_",]

[tool.coverage.run]
source = [ "app",]
omit = [ "tests/*",]

[tool.coverage.report]
show_missing = true
skip_covered = true
