name: CI/CD Pipeline

description: |
  Complete CI/CD pipeline for Meal Expense Tracker
  - Tests: Unit, integration, and security
  - Builds: Docker images
  - Deploys: To specified environment (dev/staging/prod)
  - Infrastructure: Terraform management

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_approval:
        description: 'Skip manual approval (only for non-prod environments)'
        required: false
        type: boolean
        default: false
      terraform_apply:
        description: 'Run terraform apply?'
        required: false
        type: boolean
        default: false

# Global environment variables
env:
  # Application settings
  APP_NAME: meal-expense-tracker
  PYTHON_VERSION: '3.13'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHONPATH: ${{ github.workspace }}
  FLASK_APP: app
  FLASK_ENV: test
  TESTING: 'true'

  # Deployment settings
  ENV: ${{ github.event.inputs.environment || 'dev' }}
  TF_ENV: ${{ github.event.inputs.environment || 'dev' }}
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

  # CI/CD settings
  IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
  PR_NUMBER: ${{ github.event.pull_request.number || 0 }}

  # Cache settings
  PIP_CACHE_DIR: ~/.cache/pip
  POETRY_CACHE_DIR: ~/.cache/pypoetry

  # Security settings
  DOCKER_CONTENT_TRUST: 1
  PYTHONUNBUFFERED: 1
  SECRET_KEY: 'dummy-secret-key-for-testing-only'

# Required permissions for the workflow
permissions:
  contents: read
  id-token: write
  packages: write
  security-events: write
  actions: read
  checks: write
  statuses: write
  deployments: write

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-python.outputs.python-version }}
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local
            venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest

    # Cache linting tools and results
    env:
      LINT_CACHE_DIR: ~/.cache/lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache linting tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/black
            ~/.cache/flake8
            ~/.cache/isort
            ~/.cache/mypy
            ~/.cache/bandit
          key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements*.txt') }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt || true
          pip install black flake8 isort mypy bandit safety pylint pydocstyle

      - name: Run Black (code formatter)
        run: |
          black --check --diff app/ tests/ scripts/ *.py

      - name: Run Flake8 (linter)
        run: |
          flake8 app/ tests/ scripts/ --max-line-length=88 --exclude=.git,__pycache__

      - name: Run isort (import sorter)
        run: |
          isort --check-only --diff app/ tests/ scripts/ *.py

      - name: Run MyPy (type checker)
        run: |
          mypy --install-types --non-interactive app/ tests/ scripts/

      - name: Run Bandit (security linter)
        run: |
          bandit -r app/ -c pyproject.toml

      - name: Run Safety (dependency checker)
        run: |
          safety check --full-report

      - name: Run Pylint
        run: |
          pylint app/ tests/ scripts/ --rcfile=.pylintrc || true  # Non-blocking

      - name: Run pydocstyle
        run: |
          pydocstyle app/ tests/ scripts/ --count --convention=google

      - name: Install ShellCheck
        if: contains(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run ShellCheck (for shell scripts)
        if: contains(runner.os, 'Linux')
        run: |
          find . -name '*.sh' -type f -not -path '*/venv/*' -not -path '*/.*' -print0 | xargs -0 shellcheck -x

      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      - name: Run yamllint
        run: |
          yamllint -c .yamllint .

  test:
    name: Test
    needs: setup
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Run tests
        run: |
          make test

  security-scan:
    name: Security Scan
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security scans
        run: |
          make security-scan
          make dependency-check

  build:
    name: Build
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: [build, security-scan]
    if: github.event_name == 'push' || github.event.inputs.environment == 'dev' || github.event.inputs.skip_approval == 'true'
    environment: ${{ env.ENV }}
    runs-on: ubuntu-latest

    # Only allow one concurrent deployment per environment
    concurrency:
      group: deploy-${{ env.ENV }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${{ env.ENV }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ENVIRONMENT=${{ env.ENV }}

      - name: Deploy to ECS
        run: |
          ECS_SERVICE="${{ env.APP_NAME }}-${{ env.ENV }}"

          # Update the ECS service with the new task definition
          aws ecs update-service \
            --cluster ${{ env.ENV }}-cluster \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          # Wait for the service to stabilize
          aws ecs wait services-stable \
            --cluster ${{ env.ENV }}-cluster \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

      - name: Run Database Migrations
        run: |
          TASK_DEFINITION=$(aws ecs describe-services \
            --cluster ${{ env.ENV }}-cluster \
            --services ${{ env.APP_NAME }}-${{ env.ENV }} \
            --query 'services[0].taskDefinition' \
            --output text \
            --region ${{ env.AWS_REGION }})

          aws ecs run-task \
            --cluster ${{ env.ENV }}-cluster \
            --task-definition $TASK_DEFINITION \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
            --overrides '{"containerOverrides":[{"name":"app","command":["flask","db","upgrade"]}]}'

      - name: Verify Deployment
        run: |
          LOAD_BALANCER_DNS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.ENV }}-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          curl --retry 5 --retry-delay 5 --retry-max-time 30 $LOAD_BALANCER_DNS/health

  terraform:
    name: Terraform
    needs: [lint, test, security-scan]
    if: github.event_name == 'push' || github.event.inputs.terraform_apply == 'true'
    environment: ${{ env.ENV }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Terraform

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config=environments/${{ env.ENV }}/backend.tfvars \
                        -backend-config="key=${{ env.ENV }}/terraform.tfstate"

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var-file=environments/${{ env.ENV }}/variables.tfvars \
            -out=tfplan \
            -input=false

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.ENV == 'dev' || github.event.inputs.terraform_apply == 'true'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  notify:
    name: Notify
    needs: [deploy, terraform]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set deployment status
        id: set_status
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "STATUS=succeeded" >> $GITHUB_OUTPUT
            echo "COLOR=good" >> $GITHUB_OUTPUT
          else
            echo "STATUS=failed" >> $GITHUB_OUTPUT
            echo "COLOR=danger" >> $GITHUB_OUTPUT
          fi
          echo "ENV=${{ env.ENV }}" >> $GITHUB_OUTPUT

      - name: Check for Teams webhook
        id: check_teams
        run: |
          if [ -n "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
            echo "teams_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "teams_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Teams notification
        if: steps.check_teams.outputs.teams_enabled == 'true' && (github.event_name != 'workflow_dispatch' || github.event.inputs.notify_teams == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const { WebClient } = require('@slack/webhook');
            const webhook = new WebClient(process.env.TEAMS_WEBHOOK_URL);
            await webhook.send({
              text: `Deployment ${{ steps.set_status.outputs.STATUS }} - ${{ github.workflow }}`,
              themeColor: '${{ steps.set_status.outputs.COLOR }}',
              summary: 'GitHub Action Status',
              sections: [{
                activityTitle: `Deployment ${{ steps.set_status.outputs.STATUS }} - ${{ github.workflow }}`,
                activitySubtitle: `Deployment to ${{ steps.set_status.outputs.ENV }} environment has ${{ steps.set_status.outputs.STATUS }}`,
                facts: [
                  { name: 'Status', value: '${{ steps.set_status.outputs.STATUS }}' },
                  { name: 'Environment', value: '${{ steps.set_status.outputs.ENV }}' },
                  { name: 'Workflow', value: '${{ github.workflow }}' }
                ]
              }]
            });
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        continue-on-error: true

      - name: Skip Teams notification
        if: steps.check_teams.outputs.teams_enabled != 'true'
        run: |
          echo "Skipping Teams notification: TEAMS_WEBHOOK_URL secret not set"
        continue-on-error: true
