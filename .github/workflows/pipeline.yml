name: CI/CD Pipeline

# Global environment variables
env:
  # Application settings
  APP_NAME: meal-expense-tracker
  PYTHON_VERSION: '3.11' # Using 3.11 as the latest stable version
  PYTHONPATH: ${{ github.workspace }}
  FLASK_APP: wsgi:app
  FLASK_ENV: test
  TESTING: 'true'
  POETRY_VERSION: '1.8.0'

  # Deployment settings
  ENV: ${{ github.event.inputs.environment || 'dev' }}
  TF_ENV: ${{ github.event.inputs.environment || 'dev' }}
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY || '123456789012.dkr.ecr.us-east-1.amazonaws.com' }}

  # Cache settings
  CACHE_VERSION: v2

# Required permissions for the workflow
permissions:
  contents: read
  id-token: write
  actions: read
  checks: write
  statuses: write
  security-events: write # Required for CodeQL
  packages: read # Required for package caching

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      terraform_apply:
        description: 'Run terraform apply?'
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/poetry.lock'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Set up cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
            ~/.cache/pypoetry/artifacts
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
            ${{ runner.os }}-poetry-

      - name: Install Python dependencies
        run: |
          poetry install --no-interaction --no-root --with dev,test
          poetry run pip install --upgrade pip

      - name: Run tests
        run: |
          # Install test dependencies
          poetry install --no-interaction --with test

          # Run unit tests with coverage
          poetry run pytest tests/unit -v --cov=app --cov-report=xml --cov-fail-under=80

          # Run integration tests (only on Python 3.11)
          if [ "${{ matrix.python-version }}" = "3.11" ]; then
            poetry run pytest tests/integration -v
          fi

      - name: Run linters and type checks
        if: matrix.python-version == '3.11' # Only run linters once
        run: |
          # Install development dependencies
          poetry install --no-interaction --with dev

          # Run all linters using the Makefile
          make lint

          # Additional security checks
          poetry run detect-secrets scan --update .secrets.baseline
          poetry run detect-secrets audit .secrets.baseline --report --fail

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' # Only upload coverage once
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended,security-and-quality
          tools: latest

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Install security tools
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          pip install semgrep detect-secrets

      - name: Run Semgrep
        run: semgrep --config=p/ci --error-on-findings .

      - name: Run Grype
        run: |
          GRYPE_DB_AUTO_UPDATE=false /usr/local/bin/grype dir:. --fail-on high

      - name: Detect secrets
        run: |
          detect-secrets scan --update .secrets.baseline
          detect-secrets audit .secrets.baseline --report --fail

  build:
    name: Build and Push
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/poetry.lock'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Python dependencies
        run: |
          poetry install --no-interaction --with prod
          poetry run pip install --upgrade pip

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: [test, security-scan, build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'dev')
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          sudo unzip terraform_1.5.7_linux_amd64.zip -d /usr/local/bin/
          terraform --version

      - name: Deploy to ${{ github.event.inputs.environment }}
        run: |
          make TF_ENV=${{ github.event.inputs.environment }} tf-init
          if [ "${{ github.event.inputs.terraform_apply }}" = "true" ]; then
            make TF_ENV=${{ github.event.inputs.environment }} tf-apply
          fi

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
      #     aws-region: ${{ env.AWS_REGION }}
      #     role-session-name: GitHubActions-Deploy

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
      #       ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${{ env.ENV }}-latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     build-args: |
      #       BUILDKIT_INLINE_CACHE=1
      #       ENVIRONMENT=${{ env.ENV }}

      # - name: Deploy to ECS
      #   run: |
      #     ECS_SERVICE="${{ env.APP_NAME }}-${{ env.ENV }}"

      #     # Update the ECS service with the new task definition
      #     aws ecs update-service \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --service $ECS_SERVICE \
      #       --force-new-deployment \
      #       --region ${{ env.AWS_REGION }}

      #     # Wait for the service to stabilize
      #     aws ecs wait services-stable \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --services $ECS_SERVICE \
      #       --region ${{ env.AWS_REGION }}

      # - name: Run Database Migrations
      #   run: |
      #     TASK_DEFINITION=$(aws ecs describe-services \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --services ${{ env.APP_NAME }}-${{ env.ENV }} \
      #       --query 'services[0].taskDefinition' \
      #       --output text \
      #       --region ${{ env.AWS_REGION }})

      #     aws ecs run-task \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --task-definition $TASK_DEFINITION \
      #       --launch-type FARGATE \
      #       --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
      #       --overrides '{"containerOverrides":[{"name":"app","command":["flask","db","upgrade"]}]}'

      - name: Verify Deployment
        run: |
          LOAD_BALANCER_DNS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.ENV }}-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          curl --retry 5 --retry-delay 5 --retry-max-time 30 $LOAD_BALANCER_DNS/health

  terraform:
    name: Terraform (${{ github.event.inputs.environment || 'dev' }})
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event.inputs.terraform_apply == 'true'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Terraform-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.51.1

      - name: Run TFLint
        run: |
          cd terraform
          tflint --init
          tflint --format=compact --recursive

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt -check -recursive -diff

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config=environments/${{ env.TF_ENV }}/backend.tfvars \
                        -backend-config="key=${{ env.TF_ENV }}/terraform.tfstate"

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var-file=environments/${{ env.TF_ENV }}/variables.tfvars \
            -out=tfplan \
            -input=false

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: terraform/tfplan
          if-no-files-found: error

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.ENV == 'dev' || github.event.inputs.terraform_apply == 'true'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  notify:
    name: Notify
    needs: [deploy, terraform]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set environment status
        id: set_status
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "STATUS=succeeded" >> $GITHUB_OUTPUT
            echo "COLOR=good" >> $GITHUB_OUTPUT
            echo "EMOJI=✅" >> $GITHUB_OUTPUT
          else
            echo "STATUS=failed" >> $GITHUB_OUTPUT
            echo "COLOR=danger" >> $GITHUB_OUTPUT
            echo "EMOJI=❌" >> $GITHUB_OUTPUT
          fi
          echo "ENV=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_OUTPUT

      - name: Send Deployment Status
        uses: actions/github-script@v7
        if: success() || failure()
        with:
          script: |
            const { STATUS, COLOR, ENV, EMOJI } = process.env;
            const repo = context.repo;
            const workflowRunId = context.runId;
            const workflowUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${workflowRunId}`;

            // Create a comment on the PR if this is a PR
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                ...repo,
                issue_number: context.issue.number,
                body: `${EMOJI} **Deployment to ${ENV} ${STATUS}**\n\n` +
                      `- **Workflow:** [View Workflow Run](${workflowUrl})\n` +
                      `- **Commit:** ${context.sha.slice(0, 7)}\n` +
                      `- **Triggered by:** ${context.actor}\n`
              });
            }

            // Update PR check status
            await github.rest.checks.create({
              ...repo,
              name: `Deployment to ${ENV}`,
              head_sha: context.sha,
              status: 'completed',
              conclusion: STATUS === 'succeeded' ? 'success' : 'failure',
              details_url: workflowUrl,
              output: {
                title: `Deployment ${STATUS}`,
                summary: `Deployment to ${ENV} ${STATUS}`,
                text: `Workflow run: ${workflowUrl}`
              }
            });

      - name: Send Slack Notification
        if: success() || failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ steps.set_status.outputs.EMOJI }} Deployment ${{ steps.set_status.outputs.STATUS == 'succeeded' && 'Succeeded' || 'Failed' }}\n*\n*Environment:* ${{ steps.set_status.outputs.ENV }}\n*Repository:* <https://github.com/${{ github.repository }}|${{ github.repository }}>\n*Workflow:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow Run"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
