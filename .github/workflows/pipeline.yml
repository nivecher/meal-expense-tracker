name: CI/CD Pipeline

# Global environment variables
env:
  # Application settings
  APP_NAME: meal-expense-tracker
  PYTHON_VERSION: '3.13'
  PYTHONPATH: ${{ github.workspace }}
  FLASK_APP: wsgi.py
  FLASK_ENV: test
  TESTING: 'true'

  # Deployment settings
  ENV: ${{ github.event.inputs.environment || 'dev' }}
  TF_ENV: ${{ github.event.inputs.environment || 'dev' }}
  AWS_REGION: us-east-1

  # Cache settings
  CACHE_VERSION: v1

# Required permissions for the workflow
permissions:
  contents: read
  id-token: write
  actions: read
  checks: write
  statuses: write

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      terraform_apply:
        description: 'Run terraform apply?'
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python -m pytest tests/unit -v --cov=app --cov-report=xml

      - name: Run integration tests
        if: matrix.python-version == '3.11'  # Only run integration tests once
        run: |
          python -m pytest tests/integration -v

      - name: Run linters
        if: matrix.python-version == '3.11'  # Only run linters once
        run: |
          make lint
          black --check --diff app/ tests/ scripts/ *.py
          flake8 app/ tests/ scripts/ --max-line-length=88 --exclude=.git,__pycache__
          isort --check-only --diff app/ tests/ scripts/ *.py
          mypy --install-types --non-interactive app/ tests/ scripts/
          bandit -r app/ -c pyproject.toml
          safety check --full-report
          pylint app/ tests/ scripts/ --rcfile=.pylintrc || true
          pydocstyle app/ tests/ scripts/ --count --convention=google

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'  # Only upload coverage once
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install security tools
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          pip install semgrep

      - name: Run Semgrep
        run: semgrep --config=auto .

      - name: Run Grype
        run: |
          GRYPE_DB_AUTO_UPDATE=false /usr/local/bin/grype dir:. --fail-on high

  build:
    name: Build
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make

      - name: Install Python dependencies
        run: make setup

      - name: Run tests
        run: make test

      - name: Run linters
        run: make lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: [test, security-scan, build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'dev')
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          sudo unzip terraform_1.5.7_linux_amd64.zip -d /usr/local/bin/
          terraform --version

      - name: Deploy to ${{ github.event.inputs.environment }}
        run: |
          make TF_ENV=${{ github.event.inputs.environment }} tf-init
          if [ "${{ github.event.inputs.terraform_apply }}" = "true" ]; then
            make TF_ENV=${{ github.event.inputs.environment }} tf-apply
          fi

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
      #     aws-region: ${{ env.AWS_REGION }}
      #     role-session-name: GitHubActions-Deploy

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
      #       ${{ env.ECR_REGISTRY }}/${{ env.APP_NAME }}:${{ env.ENV }}-latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     build-args: |
      #       BUILDKIT_INLINE_CACHE=1
      #       ENVIRONMENT=${{ env.ENV }}

      # - name: Deploy to ECS
      #   run: |
      #     ECS_SERVICE="${{ env.APP_NAME }}-${{ env.ENV }}"

      #     # Update the ECS service with the new task definition
      #     aws ecs update-service \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --service $ECS_SERVICE \
      #       --force-new-deployment \
      #       --region ${{ env.AWS_REGION }}

      #     # Wait for the service to stabilize
      #     aws ecs wait services-stable \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --services $ECS_SERVICE \
      #       --region ${{ env.AWS_REGION }}

      # - name: Run Database Migrations
      #   run: |
      #     TASK_DEFINITION=$(aws ecs describe-services \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --services ${{ env.APP_NAME }}-${{ env.ENV }} \
      #       --query 'services[0].taskDefinition' \
      #       --output text \
      #       --region ${{ env.AWS_REGION }})

      #     aws ecs run-task \
      #       --cluster ${{ env.ENV }}-cluster \
      #       --task-definition $TASK_DEFINITION \
      #       --launch-type FARGATE \
      #       --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
      #       --overrides '{"containerOverrides":[{"name":"app","command":["flask","db","upgrade"]}]}'

      - name: Verify Deployment
        run: |
          LOAD_BALANCER_DNS=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.ENV }}-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          curl --retry 5 --retry-delay 5 --retry-max-time 30 $LOAD_BALANCER_DNS/health

  terraform:
    name: Terraform
    needs: [test, security-scan]  # Removed non-existent lint job
    if: github.event_name == 'push' || github.event.inputs.terraform_apply == 'true'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Terraform-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config=environments/${{ env.TF_ENV }}/backend.tfvars \
                        -backend-config="key=${{ env.TF_ENV }}/terraform.tfstate"

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var-file=environments/${{ env.TF_ENV }}/variables.tfvars \
            -out=tfplan \
            -input=false

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.ENV == 'dev' || github.event.inputs.terraform_apply == 'true'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  notify:
    name: Notify
    needs: [deploy, terraform]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set environment status
        id: set_status
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "STATUS=succeeded" >> $GITHUB_OUTPUT
            echo "COLOR=good" >> $GITHUB_OUTPUT
          else
            echo "STATUS=failed" >> $GITHUB_OUTPUT
            echo "COLOR=danger" >> $GITHUB_OUTPUT
          fi
          echo "ENV=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_OUTPUT

      # - name: Send Slack notification
      #   if: success() || failure()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_MESSAGE: "Deployment to ${{ github.event.inputs.environment || 'dev' }} ${{ job.status == 'success' && 'succeeded' || 'failed' }}"
      #     SLACK_TITLE: "Deployment ${{ job.status == 'success' && 'Success' || 'Failed' }}"
      #     SLACK_USERNAME: GitHub Actions
      #     SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
      #     SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
      #   continue-on-error: true
