name: Production Deployment

on:
  release:
    types: [created]
  workflow_dispatch:
    # Optional: Add input parameters for manual triggering
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - staging
          - prod
          # Add other environments as needed

# Environment variables
env:
  # Application settings
  PYTHON_VERSION: '3.11'  # Match version with CI workflow
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

  # AWS settings
  AWS_REGION: us-east-1
  ECR_REPOSITORY: meal-expense-tracker
  ENVIRONMENT: prod

  # Terraform settings
  TF_VERSION: '1.6.0'  # Match version with other workflows

  # Security settings
  DOCKER_CONTENT_TRUST: 1

  # Output settings
  TF_CLI_ARGS_plan: '-lock-timeout=300s'
  TF_CLI_ARGS_apply: '-auto-approve -lock-timeout=300s'

  # Application configuration
  APP_NAME: meal-expense-tracker
  LAMBDA_FUNCTION_NAME: meal-expense-tracker-prod  # Direct reference instead of using env vars

permissions:
  contents: read
  id-token: write  # Required for OIDC with AWS
  security-events: write  # For security scanning

  # Required for GitHub OIDC provider
  actions: read

  # Required for GitHub Container Registry
  packages: write

  # Required for deployments
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
      # Note: Environment name must match your GitHub environment settings
      # url will be set by the deployment step

    # Only run on release events or workflow_dispatch
    if: |
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'

    env:
      TF_WORKSPACE: prod-${{ github.run_id }}
      # These secrets need to be configured in your repository
      # TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      # TF_STATE_LOCK_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for versioning
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}
          role-duration-seconds: 3600  # 1 hour
          role-skip-session-tagging: true

      - name: Configure AWS CLI
        run: |
          # Enable AWS CLI output in JSON format
          aws configure set cli_follow_urlparam false
          aws configure set cli_pager ""

          # Verify AWS credentials
          aws sts get-caller-identity

          # Configure AWS CLI to use JSON output by default
          aws configure set output json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # Disable wrapper for better error messages

      - name: Setup Terraform Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ~/.terraform.d/credentials.tfrc.json
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-
            ${{ runner.os }}-terraform-

      - name: Setup Backend Resources
        working-directory: ./terraform
        run: |
          chmod +x setup-backend.sh
          ./setup-backend.sh

      - name: Generate Backend Config
        working-directory: ./terraform
        run: |
          chmod +x generate-backend-config.sh
          ./generate-backend-config.sh

      - name: Run Checkov for Terraform Security Scans
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform
          soft_fail: true

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend-config=backend.hcl

      - name: Run Terraform Validate
        working-directory: ./terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=prod" \
            -out=tfplan

      - name: Show Plan Output
        working-directory: ./terraform
        run: |
          echo "=== Terraform Plan Output ==="
          terraform show -json tfplan | jq .

      - name: Create State Backup
        working-directory: ./terraform
        run: |
          terraform state pull > terraform.tfstate.backup
          echo "Created backup of Terraform state at $(date)" > state_backup.txt

      - name: Upload State Backup
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state-backup
          path: terraform.tfstate.backup

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Wait for Infrastructure
        run: |
          echo "Waiting for infrastructure to be ready..."
          sleep 30  # Give time for infrastructure to stabilize

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to Production
        run: |
          # Get version from release tag
          VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')

          # Deploy to production
          echo "Deploying version $VERSION to production..."
          # Add your deployment logic here

      - name: Health Check
        run: |
          # Add health check logic here
          echo "Running production health checks..."
          curl -f http://your-production-url/health || {
            echo "Health check failed"
            exit 1
          }

      # TODO: Add Telegram notifications
      # - name: Notify Success
      #   if: success()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_TOKEN }}
      #     message: |
      #       🚀 Production deployment successful!
      #       Version: ${{ github.event.release.tag_name }}
      #       Time: ${{ github.event.created_at }}
      #       Environment: Production

      # - name: Notify Failure
      #   if: failure()
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_TOKEN }}
      #     message: |
      #       ❌ Production deployment failed!
      #       Version: ${{ github.event.release.tag_name }}
      #       Time: ${{ github.event.created_at }}
      #       Environment: Production

      - name: Cleanup
        if: always()
        run: |
          # Cleanup resources if needed
          echo "Cleaning up resources..."

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: echo "version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Pull and Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          # Pull the tested image from GHCR (using version without v prefix)
          echo "Pulling version $VERSION from GHCR"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION

          # Tag for ECR
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.get_version.outputs.version }}

      - name: Run smoke tests
        run: |
          # Add your smoke test commands here
          echo "Running smoke tests..."

      # - name: Notify deployment status
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: deployments
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_TITLE: Production Deployment
      #     SLACK_MESSAGE: 'Deployment to production ${{ job.status }} for version ${{ steps.get_version.outputs.version }}'
      #     SLACK_FOOTER: 'GitHub Actions'
