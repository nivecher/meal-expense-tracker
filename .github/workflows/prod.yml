name: Production Deployment

on:
  workflow_run:
    workflows: ["Version Management"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-east-1
  ECR_REPOSITORY: meal-expense-tracker-prod
  APP_NAME: meal-expense-tracker
  ENVIRONMENT: prod
  LAMBDA_FUNCTION_NAME: ${APP_NAME}-${ENVIRONMENT}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          # Get version from pyproject.toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Pull and Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          # Pull the tested image from GHCR (using version without v prefix)
          echo "Pulling version $VERSION from GHCR"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION

          # Tag for ECR
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.get_version.outputs.version }}

      - name: Run smoke tests
        run: |
          # Add your smoke test commands here
          echo "Running smoke tests..."

      # - name: Notify deployment status
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: deployments
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_TITLE: Production Deployment
      #     SLACK_MESSAGE: 'Deployment to production ${{ job.status }} for version ${{ steps.get_version.outputs.version }}'
      #     SLACK_FOOTER: 'GitHub Actions'
