name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'
  PYTHONPATH: ${{ github.workspace }}
  FLASK_ENV: test
  TESTING: 'true'

# Required permissions
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Fast feedback job for basic linting and quick checks
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then 
              npm ci
            else 
              npm install
            fi
          else
            echo "No package.json found, skipping npm dependencies"
          fi

      - name: Python linting
        run: |
          if command -v flake8 >/dev/null 2>&1; then
            python -m flake8 app tests || echo "flake8 completed with warnings"
          else
            echo "flake8 not found, skipping flake8 check"
          fi
          if command -v black >/dev/null 2>&1; then
            python -m black --check app tests || echo "black check completed with warnings"
          else
            echo "black not found, skipping black check"
          fi

      - name: JavaScript linting
        run: |
          if [ -f package.json ]; then
            npm run lint:js || echo "JavaScript linting completed with warnings"
          else
            echo "No package.json found, skipping JavaScript linting"
          fi

      - name: CSS linting
        run: |
          echo "CSS linting would go here"

      - name: HTML template linting
        run: |
          echo "HTML template linting would go here"

  # Comprehensive test job
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run ${{ matrix.test-type }} tests
        run: |
          if command -v pytest >/dev/null 2>&1; then
            python -m pytest tests/${{ matrix.test-type }}/ -v --cov=app --cov-report=term-missing
          else
            echo "pytest not found, skipping ${{ matrix.test-type }} tests"
          fi

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Infrastructure validation
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActions-TerraformValidation-${{ github.run_id }}
          role-duration-seconds: 3600
          
      - name: Terraform format check
        run: |
          if [ -d "terraform" ]; then
            terraform -chdir=terraform fmt -check -recursive
          else
            echo "No terraform directory found, skipping format check"
          fi
        
      - name: Terraform validation
        run: |
          if [ -d "terraform" ]; then
            terraform -chdir=terraform init -backend=false
            terraform -chdir=terraform validate
          else
            echo "No terraform directory found, skipping validation"
          fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Security scan with bandit
        run: |
          if command -v bandit >/dev/null 2>&1; then
            bandit -r app/ -f json -o bandit-report.json || true
            bandit -r app/
          else
            echo "bandit not found, skipping security scan"
          fi

      - name: Safety check
        run: |
          if command -v safety >/dev/null 2>&1; then
            safety check --json --output safety-report.json || true
            safety check
          else
            echo "safety not found, skipping safety check"
          fi

  # Final status check - all jobs must pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, terraform, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.terraform.result }}" != "success" || \
                "${{ needs.security.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully"
