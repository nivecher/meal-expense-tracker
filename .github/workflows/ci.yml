name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHONPATH: ${{ github.workspace }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install versioning dependencies
        run: |
          pip install setuptools_scm

      - name: Get version
        id: get_version
        run: |
          VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
          echo "::set-output name=version::$VERSION"
          echo "Using version: $VERSION"

  check:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run lint and format checks
        run: make lint

      - name: Run unit tests with coverage
        run: |
          coverage run -m pytest --cov=app tests/unit/
          coverage report -m
          coverage xml

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          name: unit-coverage
          fail_ci_if_error: true

  build:
    needs: check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run unit tests with coverage
        run: |
          coverage run -m pytest --cov=app tests/unit/
          coverage report -m
          coverage xml

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          name: build-unit-coverage
          fail_ci_if_error: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      FLASK_APP: app
      FLASK_ENV: test
      DATABASE_URL: sqlite:///test.db
      SECRET_KEY: test-secret-key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Docker container from pulled image
        run: |
          docker run -d -p 5000:5000 \
            -e FLASK_APP=${{ env.FLASK_APP }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e SECRET_KEY=${{ env.SECRET_KEY }} \
            --name meal-expense-app \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Wait for container to start
        run: |
          echo "Waiting for container to start..."
          sleep 10
          docker ps | grep meal-expense-app

      - name: Run integration tests
        run: |
          # Run integration tests
          docker exec meal-expense-app pytest --cov=app tests/integration/
          docker exec meal-expense-app coverage report -m
          docker exec meal-expense-app coverage xml
          docker cp meal-expense-app:/app/coverage.xml /tmp/coverage.xml

      - name: Stop container
        run: docker stop meal-expense-app

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: /tmp/coverage.xml
          name: integration-coverage
          fail_ci_if_error: true

  load-test:
    needs: integration
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install wrk
        run: sudo apt-get update && sudo apt-get install -y wrk

      - name: Run Docker container from pulled image
        run: |
          docker run -d -p 5000:5000 \
            -e FLASK_APP=${{ env.FLASK_APP }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e SECRET_KEY=${{ env.SECRET_KEY }} \
            --name meal-expense-app \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Wait for container to start
        run: |
          echo "Waiting for container to start..."
          sleep 10
          docker ps | grep meal-expense-app

      - name: Run load testing
        run: |
          # Run load tests
          wrk -t12 -c400 -d30s http://localhost:5000/api/health
          docker exec meal-expense-app coverage report -m
          docker exec meal-expense-app coverage xml
          docker cp meal-expense-app:/app/coverage.xml /tmp/coverage.xml

      - name: Stop container
        run: docker stop meal-expense-app

      - name: Upload load test coverage
        uses: codecov/codecov-action@v3
        with:
          file: /tmp/coverage.xml
          name: load-test-coverage
          fail_ci_if_error: true

  deploy:
    needs: load-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Create Git tag
        run: |
          git tag -a ${{ needs.setup.outputs.version }} -m "Release ${{ needs.setup.outputs.version }}"
          git push --tags --no-verify https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
