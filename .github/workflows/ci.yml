name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'
  PYTHONPATH: ${{ github.workspace }}
  FLASK_ENV: test
  TESTING: 'true'

# Required permissions
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Fast feedback job for basic linting and quick checks
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install Python dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements-dev.txt

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies
        run: |
          if [ -f package-lock.json ]; then 
            npm ci
          else 
            npm install
          fi

      - name: Python linting
        run: |
          source venv/bin/activate
          make lint-python

      - name: JavaScript linting
        run: |
          npm run lint:js

      - name: CSS linting
        run: |
          make lint-css

      - name: HTML template linting
        run: |
          make lint-html

  # Comprehensive test job
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements-dev.txt

      - name: Run ${{ matrix.test-type }} tests
        run: |
          source venv/bin/activate
          make test-${{ matrix.test-type }}

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Infrastructure validation
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          
      - name: Terraform format check
        run: terraform -chdir=terraform fmt -check -recursive
        
      - name: Terraform validation
        run: |
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform validate

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements-dev.txt

      - name: Security scan with bandit
        run: |
          source venv/bin/activate
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/

      - name: Safety check
        run: |
          source venv/bin/activate
          safety check --json --output safety-report.json || true
          safety check

  # Final status check - all jobs must pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, terraform, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.terraform.result }}" != "success" || \
                "${{ needs.security.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully"
