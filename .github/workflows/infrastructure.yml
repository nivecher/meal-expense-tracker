name: Infrastructure Deployment

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
    branches:
      - main

  push:
    paths:
      - 'terraform/**'
      - 'cloudformation/**'
      - '.github/workflows/infrastructure.yml'

  pull_request:
    paths:
      - 'terraform/**'
      - 'cloudformation/**'
      - '.github/workflows/infrastructure.yml'

env:
  TF_VERSION: 1.5.0
  AWS_REGION: us-east-1
  ECR_REPOSITORY: meal-expense-tracker-prod
  IMAGE_TAG: ${{ github.sha }}

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'main') }}
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Backend Resources
        working-directory: ./terraform
        run: |
          chmod +x setup-backend.sh
          ./setup-backend.sh

      - name: Generate Backend Config
        working-directory: ./terraform
        run: |
          chmod +x generate-backend-config.sh
          ./generate-backend-config.sh

      - name: Run Checkov for Terraform Security Scans
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform
          soft_fail: true

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend-config=backend.hcl

      - name: Run Terraform Validate
        working-directory: ./terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=prod" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      #       ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

          # TODO
      # - name: Validate Terraform Variables
      #   run: |
      #     if [ -z "${{ secrets.DATABASE_URL }}" ] || [ -z "${{ secrets.FLASK_SECRET_KEY }}" ] || [ -z "${{ secrets.SSL_CERTIFICATE_ARN }}" ]; then
      #       echo "Error: Required secrets are not set"
      #       echo "Please ensure DATABASE_URL, FLASK_SECRET_KEY, and SSL_CERTIFICATE_ARN are configured in repository secrets"
      #       exit 1
      #     fi

      # - name: Validate Docker Build Context
      #   run: |
      #     if [ ! -f "Dockerfile" ]; then
      #       echo "Error: Dockerfile not found"
      #       exit 1
      #     fi

      - name: Verify AWS Credentials
        run: |
          aws sts get-caller-identity || {
            echo "Error: Unable to validate AWS credentials"
            exit 1
          }

          # TODO Helath check

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::Infrastructure deployment failed. Check the logs for details."

      - name: Generate and Store Secret Key
        run: |
          # Generate a random secret key
          SECRET_KEY=$(openssl rand -base64 32)

          # Store the secret key in AWS Secrets Manager
          aws secretsmanager create-secret --name flask-secret-key --secret-string "$SECRET_KEY" || \
          aws secretsmanager update-secret --secret-id flask-secret-key --secret-string "$SECRET_KEY"

          # Override the terraform.tfvars file
          echo "secret_key = \"$SECRET_KEY\"" >> terraform/terraform.tfvars
