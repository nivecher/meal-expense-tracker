name: Version Management

on:
  workflow_run:
    workflows: ["Testing Build"]
    types:
      - completed
    branches:
      - main

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (e.g., 0.5.0)'
        required: true
        type: string

  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml

      - name: Update version in pyproject.toml
        run: |
          python scripts/update-version.py

      - name: Create version tag
        run: |
          # Get current version from pyproject.toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")

          # Add 'v' prefix if not present
          if [[ $VERSION != v* ]]; then
            VERSION="v$VERSION"
          fi

          # Create tag
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Trigger Production Deployment
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Production Deployment"
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Update Docker image tags
        run: |
          # Get current version from pyproject.toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")

          # Tag and push Docker image
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
