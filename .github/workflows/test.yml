name: Testing Build

on:
  workflow_run:
    workflows: ["Development Build"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
  PYTHONPATH: ${{ github.workspace }}
  # Add required environment variables for the application
  FLASK_APP: app.py
  FLASK_ENV: testing
  DATABASE_URL: sqlite:///instance/meal_expenses.db
  SECRET_KEY: testing-key-123

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          make test

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from GitHub Container Registry
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main || echo "Failed to pull main tag"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }} || echo "Failed to pull SHA tag"

      - name: Run Docker container from pulled image
        run: |
          docker run -d -p 5000:5000 \
            -e FLASK_APP=${{ env.FLASK_APP }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e SECRET_KEY=${{ env.SECRET_KEY }} \
            --name meal-expense-app \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do curl -fs http://localhost:5000/ && break || sleep 1; done

      - name: Run load tests
        run: |
          make load-test

      - name: Stop and remove Docker container
        if: always()
        run: |
          docker rm -f meal-expense-app

      - name: Run security scans
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Check for existing tags
        id: check_tags
        run: |
          if ! git tag | grep -q "^v"; then
            echo "Creating initial tag v0.1.0"
            git tag -a "v0.1.0" -m "Initial release"
            git push origin v0.1.0
          fi

      - name: Get commit message
        id: commit_message
        run: |
          MSG=$(git log -1 --pretty=format:%s)
          echo "message=$MSG" >> $GITHUB_OUTPUT
          echo "Last commit message: $MSG"

      - name: Get next version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          fallbackTag: 'v0.1.0'
          minorList: 'feat,feature,minor'
          patchList: 'fix,bugfix,perf,refactor,test,tests,chore,docs'
          noNewCommitBehavior: 'patch'
          noVersionBumpBehavior: 'patch'
          skipInvalidTags: true

      - name: Determine version
        id: version
        run: |
          # If we got a next version from semver action, use it
          if [[ -n "${{ steps.semver.outputs.next }}" ]]; then
            VERSION="${{ steps.semver.outputs.next }}"
          else
            # Get the latest tag and increment patch version
            LATEST_TAG=$(git describe --tags --abbrev=0)
            LATEST_VERSION=${LATEST_TAG#v}
            IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
            VERSION="$major.$minor.$((patch + 1))"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Tag and push Docker image
        id: docker_tag
        if: success()
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Tagging version: $VERSION"
          
          # Tag the image that passed tests with semantic version
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v$VERSION
          
          # Check if tag already exists
          if ! git rev-parse "v$VERSION" >/dev/null 2>&1; then
            # Create and push Git tag if it doesn't exist
            git tag -a "v$VERSION" -m "Release version $VERSION"
            git push origin "v$VERSION"
          fi

      - name: Check if release exists
        id: check_release
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" \
            | grep -q "\"tag_name\": \"v$VERSION\""; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: success() && steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            Release version ${{ steps.version.outputs.version }}
            
            Changes:
            - ${{ steps.commit_message.outputs.message }}
            
            This release has passed all tests and security scans.
          draft: false
          prerelease: false