name: Test and Release

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (e.g., 0.5.0)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
  PYTHONPATH: ${{ github.workspace }}
  # Add required environment variables for the application
  FLASK_APP: wsgi.py
  FLASK_ENV: testing
  DATABASE_URL: sqlite:///instance/meal_expenses.db
  SECRET_KEY: testing-key-123

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: |
          coverage run -m pytest --cov=app tests/
          coverage report -m
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: app-coverage
          fail_ci_if_error: true

      - name: Run Bandit security scanning
        run: |
          pip install bandit
          bandit -r app/ -f json > bandit_report.json

      - name: Get version info
        id: version
        run: |
          # Install dependencies with setuptools-scm
          pip install setuptools_scm

          # Get current version using setuptools-scm
          CURRENT_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")

          # Get next version based on commit message
          if [[ "$COMMIT_MESSAGE" =~ "BREAKING CHANGE" ]]; then
            NEXT_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version().split('.')[0] + '.0.0')")
          elif [[ "$COMMIT_MESSAGE" =~ "feat" ]]; then
            MAJOR=$(python -c "from setuptools_scm import get_version; print(get_version().split('.')[0])")
            MINOR=$(python -c "from setuptools_scm import get_version; print(get_version().split('.')[1])")
            NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEXT_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version().split('.')[0] + '.' + get_version().split('.')[1] + '.' + str(int(get_version().split('.')[2]) + 1))")
          fi

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Using current version: $CURRENT_VERSION, next version: $NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from GitHub Container Registry
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main || echo "Failed to pull main tag"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }} || echo "Failed to pull SHA tag"

      - name: Run Docker container from pulled image
        run: |
          docker run -d -p 5000:5000 \
            -e FLASK_APP=${{ env.FLASK_APP }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            -e DATABASE_URL=${{ env.DATABASE_URL }} \
            -e SECRET_KEY=${{ env.SECRET_KEY }} \
            --name meal-expense-app \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Wait for container to be ready
        run: |
          echo "Waiting for container to be ready..."
          for i in {1..30}; do
            curl -s http://localhost:5000/health && break
            echo "Container not ready yet, waiting..."
            sleep 5
          done
          curl -s http://localhost:5000/health || exit 1

      - name: Run OWASP ZAP Security Scan
        uses: docker://owasp/zap2docker-stable:2.12.0
        with:
          args: >
            zap-baseline.py
            -t http://localhost:5000
            -r zap_report.html
            -c 10
            -s
            -m 10
            -l Low
            --timeout 300
            --hook /zap/wrk/ext/zap-baseline.py
        continue-on-error: true

      - name: Analyze ZAP Report
        if: always()
        run: |
          if [ -f zap_report.html ]; then
            echo "ZAP Security Scan Report Generated"
            cat zap_report.html
          else
            echo "No ZAP report generated"
          fi

      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      - name: Run load tests
        run: |
          make load-test

      - name: Stop and remove Docker container
        if: always()
        run: |
          docker rm -f meal-expense-app

      - name: Get commit message
        id: commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B ${{ github.event.workflow_run.head_sha }})
          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Tag and push Docker image
        id: tag_image
        if: success()
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Tagging version: $VERSION"

          # Tag the image that passed tests with semantic version (without v prefix)
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION

          # Push the version tag
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"

      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: >
            Release version ${{ steps.version.outputs.version }}

            Changes:
            - Automated release from GitHub Actions
            - Version: ${{ steps.version.outputs.version }}
            - Commit: ${{ github.event.workflow_run.head_sha }}
            - Commit message: ${{ steps.commit_message.outputs.message }}

            This release has passed all tests and security scans.
          draft: false
          prerelease: false
