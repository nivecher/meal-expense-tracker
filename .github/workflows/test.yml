name: Testing Build

on:
  workflow_run:
    workflows: ["Development Build"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SHORT_SHA: ${{ github.event.workflow_run.head_sha }}
  PYTHONPATH: ${{ github.workspace }}

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          make test

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from GitHub Container Registry
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          # Also pull by SHA for traceability in security scans
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-$(echo ${{ env.SHORT_SHA }} | cut -c1-7)

      - name: Run Docker container from pulled image
        run: |
          docker run -d -p 5000:5000 --env-file .env --name meal-expense-app ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do curl -fs http://localhost:5000/ && break || sleep 1; done

      - name: Run load tests
        run: |
          make load-test

      - name: Stop and remove Docker container
        if: always()
        run: |
          docker rm -f meal-expense-app

      - name: Run security scans
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-$(echo ${{ env.SHORT_SHA }} | cut -c1-7)
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Deploy to testing environment
        if: success()
        run: |
          echo "Deploying to testing environment..."
          # Add your testing deployment steps here