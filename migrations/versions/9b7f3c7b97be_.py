"""empty message

Revision ID: 9b7f3c7b97be
Revises:
Create Date: 2025-08-24 22:36:24.103845

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "9b7f3c7b97be"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False, comment="Primary key for the user"),
        sa.Column("username", sa.String(length=64), nullable=False, comment="Unique username"),
        sa.Column("email", sa.String(length=120), nullable=False, comment="User's email address"),
        sa.Column("password_hash", sa.String(length=256), nullable=True, comment="Hashed password"),
        sa.Column("is_active", sa.Boolean(), nullable=False, comment="Whether the user account is active"),
        sa.Column("is_admin", sa.Boolean(), nullable=False, comment="Whether the user has admin privileges"),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_email"), ["email"], unique=True)
        batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=True)

    op.create_table(
        "category",
        sa.Column("name", sa.String(length=100), nullable=False, comment="Name of the category (unique per user)"),
        sa.Column("description", sa.Text(), nullable=True, comment="Description of the category"),
        sa.Column(
            "color", sa.String(length=20), nullable=False, comment="Hex color code for the category (e.g., #6c757d)"
        ),
        sa.Column("icon", sa.String(length=50), nullable=True, comment="Icon identifier from the icon library"),
        sa.Column("is_default", sa.Boolean(), nullable=False, comment="Whether this is a default category"),
        sa.Column("user_id", sa.Integer(), nullable=False, comment="Reference to the user who owns this category"),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "user_id", name="uix_category_name_user"),
        comment="Categories for organizing expenses",
    )
    with op.batch_alter_table("category", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_category_name"), ["name"], unique=False)
        batch_op.create_index(batch_op.f("ix_category_user_id"), ["user_id"], unique=False)

    op.create_table(
        "restaurant",
        sa.Column("name", sa.String(length=100), nullable=False, comment="Name of the restaurant"),
        sa.Column("type", sa.String(length=50), nullable=True, comment="Type of cuisine or restaurant style"),
        sa.Column("description", sa.Text(), nullable=True, comment="Detailed description of the restaurant"),
        sa.Column("address", sa.String(length=200), nullable=True, comment="Street address"),
        sa.Column("city", sa.String(length=100), nullable=True, comment="City"),
        sa.Column("state", sa.String(length=100), nullable=True, comment="State/Province"),
        sa.Column("postal_code", sa.String(length=20), nullable=True, comment="ZIP/Postal code"),
        sa.Column("country", sa.String(length=100), nullable=True, comment="Country"),
        sa.Column("latitude", sa.Float(), nullable=True, comment="Geographic latitude"),
        sa.Column("longitude", sa.Float(), nullable=True, comment="Geographic longitude"),
        sa.Column("phone", sa.String(length=20), nullable=True, comment="Contact phone number"),
        sa.Column("website", sa.String(length=200), nullable=True, comment="Restaurant website URL"),
        sa.Column("email", sa.String(length=100), nullable=True, comment="Contact email"),
        sa.Column(
            "google_place_id", sa.String(length=255), nullable=True, comment="Google Place ID for the restaurant"
        ),
        sa.Column("price_range", sa.SmallInteger(), nullable=True, comment="Price range (1-5)"),
        sa.Column("cuisine", sa.String(length=100), nullable=True, comment="Type of cuisine"),
        sa.Column("is_chain", sa.Boolean(), nullable=False, comment="Whether it's a chain restaurant"),
        sa.Column("rating", sa.Float(), nullable=True, comment="Average rating (1-5)"),
        sa.Column("notes", sa.Text(), nullable=True, comment="Additional notes"),
        sa.Column("user_id", sa.Integer(), nullable=False, comment="Reference to the user who added this restaurant"),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "city", "user_id", name="uix_restaurant_name_city_user"),
        comment="Restaurants where expenses were incurred",
    )
    with op.batch_alter_table("restaurant", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_restaurant_cuisine"), ["cuisine"], unique=False)
        batch_op.create_index(batch_op.f("ix_restaurant_google_place_id"), ["google_place_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_restaurant_user_id"), ["user_id"], unique=False)

    op.create_table(
        "expense",
        sa.Column(
            "amount",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Amount of the expense (stored with 2 decimal places)",
        ),
        sa.Column("notes", sa.Text(), nullable=True, comment="Additional notes about the expense"),
        sa.Column(
            "meal_type", sa.String(length=50), nullable=True, comment="Type of meal (e.g., breakfast, lunch, dinner)"
        ),
        sa.Column(
            "date", sa.DateTime(timezone=True), nullable=False, comment="Date and time when the expense occurred"
        ),
        sa.Column("receipt_image", sa.String(length=255), nullable=True, comment="Path to the receipt image file"),
        sa.Column("receipt_verified", sa.Boolean(), nullable=False, comment="Whether the receipt has been verified"),
        sa.Column("user_id", sa.Integer(), nullable=False, comment="Reference to the user who made this expense"),
        sa.Column(
            "restaurant_id",
            sa.Integer(),
            nullable=True,
            comment="Reference to the restaurant where the expense occurred",
        ),
        sa.Column("category_id", sa.Integer(), nullable=True, comment="Reference to the expense category"),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(["category_id"], ["category.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["restaurant_id"], ["restaurant.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        comment="Track meal expenses with details about where and when they occurred",
    )
    with op.batch_alter_table("expense", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_expense_category_id"), ["category_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_expense_date"), ["date"], unique=False)
        batch_op.create_index(batch_op.f("ix_expense_meal_type"), ["meal_type"], unique=False)
        batch_op.create_index(batch_op.f("ix_expense_restaurant_id"), ["restaurant_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_expense_user_id"), ["user_id"], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("expense", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_expense_user_id"))
        batch_op.drop_index(batch_op.f("ix_expense_restaurant_id"))
        batch_op.drop_index(batch_op.f("ix_expense_meal_type"))
        batch_op.drop_index(batch_op.f("ix_expense_date"))
        batch_op.drop_index(batch_op.f("ix_expense_category_id"))

    op.drop_table("expense")
    with op.batch_alter_table("restaurant", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_restaurant_user_id"))
        batch_op.drop_index(batch_op.f("ix_restaurant_google_place_id"))
        batch_op.drop_index(batch_op.f("ix_restaurant_cuisine"))

    op.drop_table("restaurant")
    with op.batch_alter_table("category", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_category_user_id"))
        batch_op.drop_index(batch_op.f("ix_category_name"))

    op.drop_table("category")
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_username"))
        batch_op.drop_index(batch_op.f("ix_user_email"))

    op.drop_table("user")
    # ### end Alembic commands ###
